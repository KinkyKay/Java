A character data type represents a single character.

//----- UNICODE AND ASCII CODE -----//
How characters are encoded is defined by an encoding scheme. Java supports unicode.
ASCII code (American Standard Code for Information Interchange)
    CHARACTERS                  CODE VALUE IN DECIMAL                   UNICODE VALUE
    '0' to '9'                  48 to 57                                \u0030 to \u0039
    'A' to 'Z'                  65 to 90                                \u0041 to \u005A
    'a' to 'z'                  97 to 122                               \u0061 to \u007A

EXAMPLE:
    char letter = 'A';
    char letter = '\u0041'; // character A's unicode is 0041
    Both statements assign character A to the char variable letter.

//----- ESCAPE SEQUENCES FOR SPECIAL CHARACTERS -----//
    ESCAPE SEQUENCE     NAME                    UNICODE                 DECIMAL VALUE
    \b                  backspace               \u0008                  8
    \t                  tab                     \u0009                  9
    \n                  linefeed                \u000A                  10
    \f                  formfeed                \u000C                  12
    \r                  carriage return         \u000D                  13
    \\                  backslash               \u005C                  92
    \"                  double quote            \u0022                  34

//----- Casting between char en Numeric Types -----//
A char can be cast into any numeric type, and vice versa.
    EXAMPLE:
        // note a hex integer is written using prefix 0X
        char ch = (char)0XAB0041; // The lower 16 bits hex code 0041 is assigned to ch.
        System.out.println(ch);   // ch is character A

When a floating-point value is cast into a char, the floating-point value is first cast into a int, which is then cast
into a char.
    EXAMPLE: char ch = (char)65.25;     // Decimal 65 is assigned to ch
             System.out.println(ch);    // ch is character A

When a char is cast into a numeric type, the character's Unicode is cast into a specified numeric type.
    EXAMPLE:
        int i = (int)'A';               // The  unicode of character A is assigned to i
        System.out.println(i);          // i is 65

Any positive integer between 0 and FFFF is hexadecimal can be cast into a character implicitly. Any number not in this
range must be cast into a char explicitly. All numeric operations can be applied to char operands. A char operand is
automatically cast into a number if the other operand is a number or a character. If the other operand is a string,
the character is concatenated with the string.
    EXAMPLE:
        int i = '2' + '3';              // (int)'2' is 50 and (int) '3' is 51.
        System.out.println("i is " + i) // i is 101.
        int j = 2 + 'a';                // (int)'a' is 97.
        System.out.println("j is " + j) // j is 99.
        System.out.println(j + " is the unicode for character " + (char)j); // 99 is the unicode for character c
        System.out.println("Chapter "+ '2');

    DISPLAY:
        i is 101
        j is 99
        99 is the unicode for character c
        Chapter 2

//----- COMPARING AND TESTING CHARACTERS -----//
Two characters can be compared using the relational operators just like comparing two numbers.
    'a' < 'b' is true because the Unicode for 'a' (97) is less than the Unicode for 'b'(98).
    'a' < 'A' is false because the Unicode for 'a' (97) is greater than the Unicode for 'A'(65).
    '1' < '8' is true because the Unicode for '1'(49) is less than the Unicode for '8' (56).

    METHOD                  DESCRIPTION
    isDigit(ch)             Returns true if the specified character is a digit.
    isLetter(ch)            Returns true if the specified character is a letter.
    isLetterOrDigit(ch)     Returns true if the specified character is a letter or a digit.
    isLowerCase(ch)         Returns true if the specified character is a lowercase letter.
    isUpperCase(ch)         Returns true if the specified character is a uppercase letter.
    toLowerCase(ch)         Returns the lowercase of the specified character.
    toUpperCase(ch)         Returns the uppercase of the specified character.

